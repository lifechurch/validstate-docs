section.row id="usage"
  .col-sm-12
    h1.m-b-2 Basic Usage:

    p.font-weight-bold.text-muted validations_config.js
    p
      | The first thing you will need to do is create a 
      code.highlighter-rouge> validations config 
      | file that will hold all of your applications validation rules. For example. If you have an account creation form that you would like to validate before a user can create an account, you could set up your validations config with something like this.
    .codeblock.p-y-2
      markdown:
        ```javascript
        const VALIDATIONS = {
          account: {
            name: { required: true },
            email: { email: true },
            password: { minLength: 8 },
          }
        export default validations;
        ```

    p 
      | The validations config is simply a constant that is storing a json object of each rule. Keep in mind that Validstate is not simply a form validator, but a state validation plugin. You can also add rules to validate whether the state is in a place to allow the app to continue or decline a user interaction. If your app is aware of user roles you could also add this rule to your 
      code.highlighter-rouge> VALIDATIONS
      | constant and check where a user is permitted in a certain area of your app.
    markdown:
      ```javascript
      ...
      
      },
      adminAccess: {
        permissions: {
          includes: "ACCOUNT_CONTROL"
        }
      }
      ```
    p.font-weight-bold.text-muted index.js
    p 
      | Once you have your validation rules created you need to wire up Validstate inside of your app. In your 
      code.highlighter-rouge> index.js
      | file include the Validstate package and the validstate rules you created.
    markdown:
      ```javascript
      import Validstate from 'validstate';

      import validationConfig from '../validstate/validations_config';
      ```
    p Now initialize the Validstate and pass in your redux store using:
    markdown:
      ```javascript
      ...

      Validstate.init(validationConfig, store);
      ```
    p.font-weight-bold.text-muted reducer.js
    p
      | Finally import the 
      code.highlighter-rouge> Validstate
      | reducer into your core reducers.
    markdown:
      ```javascript
      import { ValidstateReducer } from 'validstate';

      export default combineReducers({
        validstate: ValidstateReducer
      });
      ```
    p.font-weight-bold.text-muted my_awesome_component.js
    p 
      | Inside of your component 
      code.highlighter-rouge import Validstate
    markdown:
      ```javascript
      import Validstate from 'validstate';


    p and then create an event method like normal.
    markdown:
      ```javascript
        submit(event){
          event.preventDefault();
          // Validstate validation
          if(Validstate.validate('account')){
            console.log('Valid!!');
            // action creator
            this.props.submitAccount();
          } else {
            console.log('Invalid!!');
          }
        }
      ```
    p or something like ...
    markdown:
      ```javascript
      onEmailChange(event){
        let text = event.target.value;
        // Validstate validation
        if(Validstate.validate('account')){
          console.log('Valid!!');
          // action creator
          this.props.emailChanged(text);
        } else {
          console.log('Invalid!!');
        }
      }
      ```

    p 
      | Once your validations run you can check that your state is valid. Set up your
      code.highlighter-rouge<> mapStateToProps
      | function and add your validstate reducer.
      markdown:
        ```javascript
          const mapStateToProps = ({ core, validstate }) => {
            let { name, email, password } = core;
            console.log(validstate);
            return { name, email, password, validstate};
          };
        ```
    p Now you have access to the valid properties inside of your props.
    markdown:
      ```html
      <Input label="Name" name="Name" valid={this.props.validstate.account.name.valid} value={this.props.name} onChange={this.onNameChange.bind(this)} type="text" />
      ```



